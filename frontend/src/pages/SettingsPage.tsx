import React, { useState } from 'react';
import { useSession } from '../context/SessionContext'; // Import useSession
import {
  Box,
  Typography,
  Button,
  Paper,
  CircularProgress,
  Alert,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle
} from '@mui/material';
import SettingsIcon from '@mui/icons-material/Settings';
import { clearAllData } from '../services/api'; // Corrected path

const SettingsPage: React.FC = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [openConfirmDialog, setOpenConfirmDialog] = useState(false);
  const { fetchSessions } = useSession(); // Get fetchSessions from context

  const handleClearData = async () => {
    setOpenConfirmDialog(false); // Close dialog
    setIsLoading(true);
    setError(null);
    setSuccess(null);
    try {
      await clearAllData(); // API call
      setSuccess('All debug data (sessions, jobs, and related files) has been cleared successfully.');
      // Refresh session list and signal job list refresh
      if (fetchSessions) {
        fetchSessions();
      }
      localStorage.setItem('jobDataLastClearedTimestamp', Date.now().toString());
    } catch (err: any) {
      let errorMessage = 'Failed to clear data.';
      if (err.response && err.response.data && err.response.data.detail) {
        errorMessage = err.response.data.detail;
      } else if (err.message) {
        errorMessage = err.message;
      }
      setError(errorMessage);
      console.error("Error in handleClearData:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleOpenConfirmDialog = () => {
    setOpenConfirmDialog(true);
  };

  const handleCloseConfirmDialog = () => {
    setOpenConfirmDialog(false);
  };

  return (
    <Paper sx={{ p: 3, maxWidth: 'md', margin: 'auto', mt: 4 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
        <SettingsIcon sx={{ mr: 1.5, fontSize: '2rem' }} color="primary" />
        <Typography variant="h4" component="h1">
          Application Settings
        </Typography>
      </Box>

      <Typography variant="h6" gutterBottom sx={{ mt: 3, mb: 1 }}>
        Data Management
      </Typography>
      <Typography variant="body1" color="text.secondary" sx={{ mb: 2 }}>
        This action will permanently delete all uploaded traces (PCAP files),
        session metadata, transformation rules, asynchronous job records,
        and any files generated by these jobs. This is intended for debugging
        and development purposes.
      </Typography>

      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
      {success && <Alert severity="success" sx={{ mb: 2 }}>{success}</Alert>}

      <Button
        variant="contained"
        color="error"
        onClick={handleOpenConfirmDialog}
        disabled={isLoading}
        startIcon={isLoading ? <CircularProgress size={20} color="inherit" /> : null}
        sx={{ mt: 2 }}
      >
        {isLoading ? 'Clearing Data...' : 'Clear All Debug Data'}
      </Button>

      <Dialog
        open={openConfirmDialog}
        onClose={handleCloseConfirmDialog}
        aria-labelledby="confirm-dialog-title"
        aria-describedby="confirm-dialog-description"
      >
        <DialogTitle id="confirm-dialog-title">Confirm Data Deletion</DialogTitle>
        <DialogContent>
          <DialogContentText id="confirm-dialog-description">
            Are you sure you want to delete ALL sessions, traces, jobs, and their associated files?
            This action is irreversible and will remove all data from the application.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseConfirmDialog} color="primary">
            Cancel
          </Button>
          <Button onClick={handleClearData} color="error" autoFocus>
            Confirm Delete
          </Button>
        </DialogActions>
      </Dialog>
    </Paper>
  );
};

export default SettingsPage;
